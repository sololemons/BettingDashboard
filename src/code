<template>
  <div class="p-4">
    <div v-if="loading">
      <LoadingSpinner :show="loading" />
    </div>

    <!-- Search Bar -->
    <div class="relative w-full max-w-lg mx-auto">
      <input
        v-model="searchPhone"
        type="text"
        placeholder="Search by Phone Number..."
        class="w-full pl-10 pr-4 py-2 text-gray-700 border rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-green-500"
      />
      <div class="absolute left-3 top-2 text-gray-500">üîç</div>
      <button @click="fetchUserProfile" class="bg-green-500 text-white px-4 py-2 rounded-md ml-2">
        Search
      </button>
    </div>

    <div v-if="user" class="flex flex-col lg:flex-row gap-4 mt-4">
      <div class="flex flex-col items-center border border-gray-300 bg-white w-full lg:w-1/2 xl:w-[40%] p-6 rounded-2xl shadow-md">
        <div class="text-2xl font-extrabold hover:scale-95 transition cursor-pointer">Profile</div>
        <div class="flex flex-col w-full p-4 border bg-stone-100 shadow-lg rounded-lg space-y-4 mt-4">
          <p><span class="font-semibold">üìû Phone Number:</span> {{ user.phoneNumber }}</p>
          <p><span class="font-semibold">Customer ID:</span> {{ user.id }}</p>
        </div>
      </div>
    </div>

    <!-- Tabs Navigation -->
    <div class="flex space-x-4 mt-6 border-b">
      <button @click="activeTab = 'bets'" :class="{ 'border-b-4 border-green-500 font-bold': activeTab === 'bets' }" class="px-4 py-2">Bets</button>
      <button @click="activeTab = 'transactions'" :class="{ 'border-b-4 border-green-500 font-bold': activeTab === 'transactions' }" class="px-4 py-2">Transactions</button>
    </div>

    <!-- Bets Table -->
    <div v-if="activeTab === 'bets' && bets.length > 0" class="mt-4">
      <table class="w-full bg-green-300">
        <thead class="bg-green-500 text-white">
          <tr>
            <th class="py-3 px-4">Bet ID</th>
            <th class="py-3 px-4">Bet Placed On</th>
            <th class="py-3 px-4">Possible Win</th>
            <th class="py-3 px-4">Stake</th>
            <th class="py-3 px-4">Status</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="bet in bets" :key="bet.betId" class="hover:bg-green-500 cursor-pointer text-center" @click="openModal(bet.betId)">
            <td class="py-3">{{ bet.betId }}</td>
            <td class="py-3">{{ formatDate(bet.betPlacedOn) }}</td>
            <td class="py-3">{{ bet.possibleWin }}</td>
            <td class="py-3">{{ bet.stake }}</td>
            <td class="py-3">{{ bet.status }}</td>
          </tr>
        </tbody>
      </table>
    </div>

  
    <div v-if="activeTab === 'transactions' && transactions.length > 0" class="mt-4">
      <table class="w-full bg-blue-300">
        <thead class="bg-blue-500 text-white">
          <tr>
            <th class="py-3 px-4">Transaction Ref</th>
            <th class="py-3 px-4">Amount</th>
            <th class="py-3 px-4">Transaction Type</th>
            <th class="py-3 px-4">Transaction Date </th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="transaction in transactions" :key="transaction.transactionRef" class="hover:bg-blue-500 cursor-pointer text-center">
            <td class="py-3">{{ transaction.transactionRef }}</td>
            <td class="py-3">{{ transaction.amount }}</td>
            <td class="py-3">{{ transaction.transactionType }}</td>
            <td class="py-3">{{ formatDate(transaction.transactionDate) }}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>

<script setup>
import { ref } from "vue";
import axios from "axios";
import LoadingSpinner from "./LoadingSpinner.vue";

const searchPhone = ref("");
const user = ref(null);
const bets = ref([]);
const transactions = ref([]);
const activeTab = ref("bets"); 
const loading = ref(false);

const fetchUserProfile = async () => {
  if (!searchPhone.value) return;
  loading.value = true;
  try {
    const response = await axios.get(`http://localhost:8081/admins/get?phoneNumber=${encodeURIComponent(searchPhone.value)}`);
    user.value = response.data;
    if (user.value?.id) {
      await fetchBets(user.value.id);
      await fetchTransactions(user.value.id);
    }
  } catch (error) {
    user.value = null;
    bets.value = [];
    transactions.value = [];
  } finally {
    loading.value = false;
  }
};

const fetchBets = async (id) => {
  try {
    const response = await axios.get(`http://localhost:8081/admins/get/bets?id=${id}`);
    bets.value = response.data;
  } catch (error) {
    bets.value = [];
  }
};

const fetchTransactions = async (id) => {
  try {
    const response = await axios.get(`http://localhost:8081/admins/get/transactions?id=${id}`);
    transactions.value = response.data;
  } catch (error) {
    transactions.value = [];
  }
};

const formatDate = (dateString) => {
  return new Date(dateString).toLocaleDateString("en-US", {
    weekday: "long",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit"
  });
};
</script>









<template>
  <div class="flex flex-col justify-between items-start gap-4 p-4">
    
 
    <div class="relative flex flex-col bg-stone-200 rounded-2xl border border-gray-200 p-6 w-full 
      sm:w-11/12 md:w-[53%] lg:w-[80%] xl:w-full">
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
        
        <div class="bg-green-400 h-32 sm:h-40 md:h-44 lg:h-48 rounded-xl shadow-md flex items-center justify-center 
          transform hover:scale-95 transition border border-gray-300">
          <p class="text-gray-700 font-semibold text-lg text-center"><span class="mr-4">Total Bets:</span><span class="font-extrabold text-lg text-green-400"></span>{{ totalBetsPlaced  }}</p>
        </div>

        <div class="bg-yellow-300 h-32 sm:h-40 md:h-44 lg:h-48 rounded-lg shadow-md flex items-center justify-center 
          transform hover:scale-95 transition border border-gray-300">
          <font-awesome-icon :icon="['fas', 'users']" class=" text-blue-600 mr-3 text-4xl" />
          <p class="text-gray-700 font-semibold text-lg text-center"><span class="mr-4">Total Active Users:</span><span class="font-extrabold text-lg text-green-400">{{ totalActiveUsers }}</span></p>
        </div>

        <div class="bg-blue-400 h-32 sm:h-40 md:h-44 lg:h-48 rounded-lg shadow-md flex items-center justify-center 
          transform hover:scale-95 transition border border-gray-300">
          <font-awesome-icon :icon="['fas', 'dollar-sign']" class=" text-blue-600 mr-3 text-4xl" />
          <p class="text-gray-700 font-semibold text-lg text-center"><span class="mr-4">Total Revenue: </span><span class="font-extrabold text-lg text-green-400">{{ totalRevenue }}</span></p>
        </div>
        <div class="bg-blue-400 h-32 sm:h-40 md:h-44 lg:h-48 rounded-lg shadow-md flex items-center justify-center 
          transform hover:scale-95 transition border border-gray-300">
          <font-awesome-icon :icon="['fas', 'user-plus']" class=" text-blue-600 mr-3 text-4xl" />
          <p class="text-gray-700 font-semibold text-lg text-center">Total Signups</p>
        </div>
        
        

      </div>
    </div>

   
    <div class="flex flex-col sm:flex-row justify-between items-start bg-lime-300 p-6 rounded-2xl border border-gray-200 w-full 
      sm:w-[90%] md:w-[60%] lg:w-[60%] xl:w-[75%]">
      
      <div class="w-full">
        <div class="font-extrabold text-2xl text-center mb-6">Analytics Graph</div>
        
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2 gap-6">
          
          <div class="bg-stone-50 p-6 rounded-2xl shadow-md border border-gray-200 flex items-center justify-center 
            h-40 sm:h-44 md:h-48 lg:h-56 xl:h-64">
            <p class="text-gray-700 font-semibold">Card 1</p>
          </div>

          <div class="bg-stone-50 p-6 rounded-2xl shadow-md border border-gray-200 flex items-center justify-center 
            h-40 sm:h-44 md:h-48 lg:h-56 xl:h-64">
            <p class="text-gray-700 font-semibold">Card 2</p>
          </div>

          <BarChart :chart-data="chartData" :chart-options="chartOptions" />

    

          

         

        </div>
      </div>
    </div>
   
  </div>


</template>
<script setup>
import { ref } from 'vue';
import { onMounted } from 'vue';
import{ computed } from 'vue';
import axios from 'axios';
import BarChart from './BarChart.vue';
import moment from 'moment/moment';


const bets = ref([]);
const users = ref([]);
const transactions = ref([]);


const weekDays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];


const selectedDate = ref(moment().format("YYYY-MM-DD")); 
const chartData = ref({
  labels: weekDays,
  datasets: [
    {
      label: "Bets per Day",
      backgroundColor: "rgba(54, 162, 235, 0.5)",
      borderColor: "rgba(54, 162, 235, 1)",
      borderWidth: 1,
      data: Array(7).fill(0) 
    }
  ]
});


const chartOptions = {
  responsive: true,
  maintainAspectRatio: false,
  scales: {
    x: { title: { display: true, text: "Day of the Week" } },
    y: { title: { display: true, text: "Number of Bets" }, beginAtZero: true }
  }
};




const fetchUsers = async () => {
  try {
    const response = await axios.get(`http://localhost:8081/admins/all/user`);
    users.value = response.data;
  } catch (error) {
    console.error("No users found", error);
    users.value = [];
  }
};
const fetchTransactions = async () => {
  try {
    const response = await axios.get(`http://localhost:8081/admins/fetch/all`);
    transactions.value = response.data;
  } catch (error) {
    console.error("No transactions found", error);
    transactions.value = [];
  }
};

const totalActiveUsers = computed(() => users.value.length);
const totalBetsPlaced = computed(() => bets.value.length);

const totalRevenue = computed(() => {
  return transactions.value
    .filter(transaction => transaction.transactionType === 'DEBIT') 
    .reduce((sum, transaction) => sum + (transaction.amount || 0), 0); 
});



const fetchBets = async () => {
  try {
    const response = await axios.get("http://localhost:8081/admins/all/bets");
    bets.value = response.data;

    const betCounts = { Monday: 0, Tuesday: 0, Wednesday: 0, Thursday: 0, Friday: 0, Saturday: 0, Sunday: 0 };
    const weekStart = moment(selectedDate.value).startOf("isoWeek");

 
    bets.forEach((bet) => {
      const betDate = moment(bet.betPlacedOn.split("T")[0]); 
      if (betDate.isBetween(weekStart, weekStart.clone().endOf("isoWeek"), null, "[]")) {
        const dayName = betDate.format("dddd");
        betCounts[dayName]++;
      }
    });
    chartData.value.datasets[0].data = weekDays.map((day) => betCounts[day]);

  } catch (error) {
    console.error("Failed to fetch bets:", error);
  }
};




onMounted(() => {
  fetchBets();
  fetchUsers();
  fetchTransactions();
 
});
</script>

