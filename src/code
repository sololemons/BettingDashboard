<template>
  <div class="p-4">
    <div v-if="loading">
      <LoadingSpinner :show="loading" />
    </div>

    <!-- Search Bar -->
    <div class="relative w-full max-w-lg mx-auto">
      <input
        v-model="searchPhone"
        type="text"
        placeholder="Search by Phone Number..."
        class="w-full pl-10 pr-4 py-2 text-gray-700 border rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-green-500"
      />
      <div class="absolute left-3 top-2 text-gray-500">üîç</div>
      <button @click="fetchUserProfile" class="bg-green-500 text-white px-4 py-2 rounded-md ml-2">
        Search
      </button>
    </div>

    <div v-if="user" class="flex flex-col lg:flex-row gap-4 mt-4">
      <div class="flex flex-col items-center border border-gray-300 bg-white w-full lg:w-1/2 xl:w-[40%] p-6 rounded-2xl shadow-md">
        <div class="text-2xl font-extrabold hover:scale-95 transition cursor-pointer">Profile</div>
        <div class="flex flex-col w-full p-4 border bg-stone-100 shadow-lg rounded-lg space-y-4 mt-4">
          <p><span class="font-semibold">üìû Phone Number:</span> {{ user.phoneNumber }}</p>
          <p><span class="font-semibold">Customer ID:</span> {{ user.id }}</p>
        </div>
      </div>
    </div>

    <!-- Tabs Navigation -->
    <div class="flex space-x-4 mt-6 border-b">
      <button @click="activeTab = 'bets'" :class="{ 'border-b-4 border-green-500 font-bold': activeTab === 'bets' }" class="px-4 py-2">Bets</button>
      <button @click="activeTab = 'transactions'" :class="{ 'border-b-4 border-green-500 font-bold': activeTab === 'transactions' }" class="px-4 py-2">Transactions</button>
    </div>

    <!-- Bets Table -->
    <div v-if="activeTab === 'bets' && bets.length > 0" class="mt-4">
      <table class="w-full bg-green-300">
        <thead class="bg-green-500 text-white">
          <tr>
            <th class="py-3 px-4">Bet ID</th>
            <th class="py-3 px-4">Bet Placed On</th>
            <th class="py-3 px-4">Possible Win</th>
            <th class="py-3 px-4">Stake</th>
            <th class="py-3 px-4">Status</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="bet in bets" :key="bet.betId" class="hover:bg-green-500 cursor-pointer text-center" @click="openModal(bet.betId)">
            <td class="py-3">{{ bet.betId }}</td>
            <td class="py-3">{{ formatDate(bet.betPlacedOn) }}</td>
            <td class="py-3">{{ bet.possibleWin }}</td>
            <td class="py-3">{{ bet.stake }}</td>
            <td class="py-3">{{ bet.status }}</td>
          </tr>
        </tbody>
      </table>
    </div>

  
    <div v-if="activeTab === 'transactions' && transactions.length > 0" class="mt-4">
      <table class="w-full bg-blue-300">
        <thead class="bg-blue-500 text-white">
          <tr>
            <th class="py-3 px-4">Transaction Ref</th>
            <th class="py-3 px-4">Amount</th>
            <th class="py-3 px-4">Transaction Type</th>
            <th class="py-3 px-4">Transaction Date </th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="transaction in transactions" :key="transaction.transactionRef" class="hover:bg-blue-500 cursor-pointer text-center">
            <td class="py-3">{{ transaction.transactionRef }}</td>
            <td class="py-3">{{ transaction.amount }}</td>
            <td class="py-3">{{ transaction.transactionType }}</td>
            <td class="py-3">{{ formatDate(transaction.transactionDate) }}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>

<script setup>
import { ref } from "vue";
import axios from "axios";
import LoadingSpinner from "./LoadingSpinner.vue";

const searchPhone = ref("");
const user = ref(null);
const bets = ref([]);
const transactions = ref([]);
const activeTab = ref("bets"); 
const loading = ref(false);

const fetchUserProfile = async () => {
  if (!searchPhone.value) return;
  loading.value = true;
  try {
    const response = await axios.get(`http://localhost:8081/admins/get?phoneNumber=${encodeURIComponent(searchPhone.value)}`);
    user.value = response.data;
    if (user.value?.id) {
      await fetchBets(user.value.id);
      await fetchTransactions(user.value.id);
    }
  } catch (error) {
    user.value = null;
    bets.value = [];
    transactions.value = [];
  } finally {
    loading.value = false;
  }
};

const fetchBets = async (id) => {
  try {
    const response = await axios.get(`http://localhost:8081/admins/get/bets?id=${id}`);
    bets.value = response.data;
  } catch (error) {
    bets.value = [];
  }
};

const fetchTransactions = async (id) => {
  try {
    const response = await axios.get(`http://localhost:8081/admins/get/transactions?id=${id}`);
    transactions.value = response.data;
  } catch (error) {
    transactions.value = [];
  }
};

const formatDate = (dateString) => {
  return new Date(dateString).toLocaleDateString("en-US", {
    weekday: "long",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit"
  });
};
</script>
